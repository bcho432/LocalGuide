{"ast":null,"code":"var _jsxFileName = \"/Users/bryancho/Desktop/Personal_Projects/rest_recommender/client/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nconst initialState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  isLoading: false,\n  isAuthenticated: false\n};\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isLoading: false,\n        isAuthenticated: true\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isLoading: false,\n        isAuthenticated: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isLoading: false,\n        isAuthenticated: false\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    default:\n      return state;\n  }\n}\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token and get user data\n      authService.getProfile().then(user => {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n      }).catch(() => {\n        localStorage.removeItem('token');\n        dispatch({\n          type: 'LOGOUT'\n        });\n      });\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'LOGIN_START'\n      });\n      const response = await authService.login(email, password);\n      localStorage.setItem('token', response.token);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: response\n      });\n      toast.success('Welcome back!');\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      toast.error(error.message || 'Login failed');\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      dispatch({\n        type: 'LOGIN_START'\n      });\n      const response = await authService.register(name, email, password);\n      localStorage.setItem('token', response.token);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: response\n      });\n      toast.success('Account created successfully!');\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: error.message\n      });\n      toast.error(error.message || 'Registration failed');\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    queryClient.clear();\n    toast.success('Logged out successfully');\n  };\n  const updateUser = async userData => {\n    try {\n      const updatedUser = await authService.updateProfile(userData);\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: updatedUser\n      });\n      toast.success('Profile updated successfully');\n    } catch (error) {\n      toast.error(error.message || 'Failed to update profile');\n      throw error;\n    }\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"BZ6XGcxXiMcCXxn4R+WXQARGw4U=\", false, function () {\n  return [useQueryClient];\n});\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useQueryClient","toast","authService","jsxDEV","_jsxDEV","AuthContext","undefined","initialState","user","token","localStorage","getItem","isLoading","isAuthenticated","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","queryClient","getProfile","then","catch","removeItem","login","email","password","response","setItem","success","error","message","register","name","logout","clear","updateUser","userData","updatedUser","updateProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/bryancho/Desktop/Personal_Projects/rest_recommender/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { toast } from 'react-hot-toast';\nimport { authService } from '../services/authService';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\ntype AuthAction =\n  | { type: 'LOGIN_START' }\n  | { type: 'LOGIN_SUCCESS'; payload: { user: User; token: string } }\n  | { type: 'LOGIN_FAILURE'; payload: string }\n  | { type: 'LOGOUT' }\n  | { type: 'UPDATE_USER'; payload: User };\n\ninterface AuthContextType extends AuthState {\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst initialState: AuthState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  isLoading: false,\n  isAuthenticated: false,\n};\n\nfunction authReducer(state: AuthState, action: AuthAction): AuthState {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isLoading: false,\n        isAuthenticated: true,\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isLoading: false,\n        isAuthenticated: false,\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isLoading: false,\n        isAuthenticated: false,\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token and get user data\n      authService.getProfile()\n        .then((user) => {\n          dispatch({ type: 'LOGIN_SUCCESS', payload: { user, token } });\n        })\n        .catch(() => {\n          localStorage.removeItem('token');\n          dispatch({ type: 'LOGOUT' });\n        });\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      dispatch({ type: 'LOGIN_START' });\n      const response = await authService.login(email, password);\n      localStorage.setItem('token', response.token);\n      dispatch({ type: 'LOGIN_SUCCESS', payload: response });\n      toast.success('Welcome back!');\n    } catch (error: any) {\n      dispatch({ type: 'LOGIN_FAILURE', payload: error.message });\n      toast.error(error.message || 'Login failed');\n      throw error;\n    }\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    try {\n      dispatch({ type: 'LOGIN_START' });\n      const response = await authService.register(name, email, password);\n      localStorage.setItem('token', response.token);\n      dispatch({ type: 'LOGIN_SUCCESS', payload: response });\n      toast.success('Account created successfully!');\n    } catch (error: any) {\n      dispatch({ type: 'LOGIN_FAILURE', payload: error.message });\n      toast.error(error.message || 'Registration failed');\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    dispatch({ type: 'LOGOUT' });\n    queryClient.clear();\n    toast.success('Logged out successfully');\n  };\n\n  const updateUser = async (userData: Partial<User>) => {\n    try {\n      const updatedUser = await authService.updateProfile(userData);\n      dispatch({ type: 'UPDATE_USER', payload: updatedUser });\n      toast.success('Profile updated successfully');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to update profile');\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}